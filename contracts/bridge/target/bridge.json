{
  "name": "bridge",
  "functions": [
    {
      "name": "_initialize",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "add_token",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "token_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "token",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce_for_transfer",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 0,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+1VQQ4CIQws7C5sheg/PGHiA/b/rxK0TSYsnuwejDZpgBaGYWggEpGjl03VZ9qb5jdpy2d2c3ZY5Uie/kt4ToY83YCng7po7VI9VI/VrxJn2tcOy1zEYlnbzEMsSn+Sts1ZjXUKwM0IswT7+ywM2sygkWqzDDQPA83jQPMVMC6Qp+5OzrKGbc92x7tWc914gz7D+Y6oh5Mt5rMekjFmw8igieqn3BPkE+iVjfVysKfi6hj5/bn+NleGGL5Bml8h5rtz4DuXAaN/I0w/T5INPGze7N2np/YAao7Tjj0JAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "operator",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_storage",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/9VZW07DMBB0nEeTpgRSCi3lcYbwOEDOwA2QqPhEAu7DP6eEBI86rJwKKU6d7k+cdXZndpqsKztSSgXq10K1tYCuEY21ea7xfRl/QnG1uVY9LSEOrnLGPzlikysjztpcC1OLdot7m1t0TUhvVziB+ms1jUOqWz6X0bwmnxaxjXafNB9bYhILHsfDF5EOMpY1ikUtVT9rNWKcmu6BNRUchuQCHZA3Elx84k7c4lZNjpRw8V5MSHfgp8Qjdcvjjr9HrjcbQGcldIYBq6s3+ODS1Rswn5JPi1jZG1AXPzcz49CSOyff1IxnlljWKBe1VP2s1YhxaroHFveG2Qi4xHvigt8EeaeCi0/cI7e4bZ8qCBfv6BHpDvyCeBRuedx39anjAXRWQmfYsdBbau+bS+CZS1fPxHxBPi1iZc8szZh75tyMQ0vuknwnZjy3xLJGpail6metRoxT0z2wuGfOR8AlHxGXeE9c8H4g74ng4hP31C1u278XhIvv5ZR0B/6CeCzc8njgPsX1ng2gsxI6w4DVtZb45pKPiEvgmUvXWoL5Bfm0iJVrydKMeS1ZmXFoyb0k37kZryyxrNFS1FL1s1YjxqnpHli8lqxGwCUfEZd4RFzKPXHBu4q854KLT9wLt7jturYmXHy7F6Q78NfE48otj4dM8GhsV3+7Ii6XbrncNjmv3eZsdb4h/qgVODnN81p647i2gDCRF/fM779c8wPiWh4Q16Vnrhn51uTD/CX5tKiD9+fx/EQNcz6RqO1+uqucfJYA29WLhtzPb/ZH8Y29f7y+Pb1sHjdPz11HaYp+Djnmv2jYHo/Ih61YPlJB/IR8yJPSnJTHWf0yb9e5Iewb0NvzaXwcAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_swap",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "swap_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "swap::Swap",
          "fields": [
            {
              "name": "token_id",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "amount",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/81XTU+DQBBdhELp97f1tvoDGmjjzQN3b5p4J2n10kpSMP59u+1MfG7RmHSwTtLuMAvz3ryBZfGUUo46mAs+GscSGqPTLHbkckUu8LyAOox5u98T+SHMs/ngJ0J8fHm9IuTOY41qUjDifKi+9tXWwKOxQzrUZDnPQ8Bls++tBHzG94GbEJfYV5+9Fsq573Mgm/PW5KiDJi5oYqwJ8wHM1YX1ctTxs8HHyO+3XC/OzLWq/oeyOect4ozPq/qmnqZwPSZHg3J5gNUEzHYFvWtRLod+jNEA3E4FuIxTI1zmwVgunHNDYxv0sPtRhTZoCfiMhVycM3PB942CWNvSCt9B2IN7mO+Rj++yPvluSe4exLrk90uuRY16Vi3RabbXCHESOGasBnDo/wMu9T/iwj3hvF2LyzlxB7K4+3V0CLh8jw5Ad8YfAo+RcP0mx7iExwh4MP4YeExkecxNjssSHhPgwfh8Xgg+PttTSzcTu7JqwPUF8/G6MYUY7zM5R0AauLIaLCrYfyyQP9tP67QPo/BePzbrCL+L8iLbpi+rh1W6dIAWU2Vp8VMMfVzeeYvrQYyXrBrE+PoAYpwHt8tHn7aJUP1YqCop1KUiys67pvGOxseDfjpfZ4WO9OvuP12vs/fVcqZxLtebt7zQeZFuC/28zTY6nn0A3LoK58wPAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "swap_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "token_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce_for_transfer",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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RrBGzAVMuEhM364XiSE58AVGuEgMyYEvEMJFYkgOfIEPLhJDcuALdNAgptX30HBE/b2aeMj7dTPGI/7+h/xI0PTLx5aX8nJBGe6g/Mfevkz5jzeCZcp/vGssU/7jLWaZ8h/vR8uUGzev92UX20z5xCFHvvkdu3yik1BD6Um72D2mznGxKcyc4wJHnDvHhdFOnePCEqfOcWFeU+e4sJmpc1wYwtQ5Lpbu1Dkc1vkFNjd3Dod1fgG4zZ3DYZ1foGhz53BY5xfQ2Nw5HNb5Bd41dw6HdX4BYs2dw2GdXyBTc+dwWOcXcNPcORzW+QWGNHcOh3V+AQzNncNhnV+gPXPncFjnFxDO3Dkc1vkFLjN3Dod1fgG2zJ3DYZ1fIChz53BY5xewyNw5HNb5BdYxdw6HdX4BYMydw2GdX6ASc+dwWOcXUMPcORzW+QV+MHcOh3V+AQrMncNhnV9U+ufO4bDOL8r3c+dwWOcXNfm5czis84tC+9w5HNb5RfV87hwO6/yiJD53Dod1flHnnjuHwzq/KF7PncNhnV9UpOfO4bDOLxrKc+dwWOdXrd+pczis86uO7tQ5HNb5VaN26hwO6/yq/zp1Dod1ftVWnTqHwzq/6pZOncNhnV81QafO4bDOr3qbU+dwWOdXLcupczy/zutVzXHqHM+v83pVHZw6x/PrvB7Pr/N6VZybOsfz67w69OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvThqkMfrjr04apDH6469OGqQx+uOvTh1KEPpw59OHXow6lDH06P59e5OvTh1KEPpw59OHXow6lDH04d+nDq0IdThz6cOvTh1KEPpw59OHXow6lDH04d+nDq0IdThz6cOvTh1KEPpw59OHXow6lDH04d+nDq0IdThz6cOvTh1KEPpw59OHXow6lDH04d+nDq0IdThz6cOvTh1KEPpw59OHXow6lDH04d+nDq0IdThz6cOvTh1KEPpw59OHXow6lDH04d+nDq0IdThz6cOvTh1KEPpw59OHXow6lDH04d+nDq0IdThz6cOvTh1KEPpw59OHXow6lDH04d+nDq0IdThz6cOvTh1KEPpw59OHXow6lDH04d+nDq0IdThz6cOvTh1KEPpw59OHXow6lDH04d+nDq0IdThz6cOvTh1KEPpw59OHXow6lDH04d+nDq0IdThz6cOvTh1KEPpw59OHXow6lDH04d+nDq0IdrDn245tCHaw59uObQh2vH8+u8OfThmkMfrjn04ZpDH6459OGaQx+uOfThmkMfrjn04ZpDH6459OGaQx+uOfThmkMfrjn04ZpDH6459OGaQx+uOfThmkMfrjn04ZpDH6459OGaQx+uOfThmkMfrjn04ZpDH6459OGaQx+uOfThmkMfrjn04ZpDH6459OGaQx+uOfThmkMfrjn04ZpDH6459OGaQx+uOfThmkMfrjn04ZpDH6459OGaQx+uOfThmkMfrjn04ZpDH671+3DpUPnM0dIvc7wv6y7d+8u6qzEdJXxdln/4E/Vba5Pn6K7GyXN0V+PkObqrcfIc3dU4eY7uapw8R3c1Tp7jYjVOneNi6U6dw2Gd91trk+dwWOf91trkORzWeb+1NnkOh3Xeb61NnsNhnfdba5PncFjn/dba5Dkc1nm/tTZ5Dod13m+tTZ7DYZ33W2uT53BY5/3W2uQ5HNZ5v7U2eQ6Hdd5vrU2ew2Gd91trk+dwWOf91trkORzWeb+1NnmOx9d5OvqttclzPL7OzzkeX+fnHI+v83OOx9f5Ocfj6/yc4/F1fs7x+Do/53h8nZ9zOKzzfmtt8hwO67zfWps8h8M677fWJs/hsM77rbXJczis835rbfIcDuu831qbPIfDOu+31ibP4bDO+621yXM4rPN+a23yHA7rvN9amzyHwzrvt9Ymz+GwzvuttclzOKzzfmtt8hwO67zfWps8h8M677fWJs/hsM77rbXJczis835rbfIcDuu831qbPIfDOu+31ibP4bDO+621yXM4rPN+a23yHA7rvN9amzyHwzrvt9Ymz+GwzvuttclzOKzzq4rb1Dkc1vnzfbg/P8thDod1/nwf7vwsh3X+fB/u/CyHdf58H+78LId1/nwfLh3P9+HOORzW+fN9uHMOh3X+fB/unMNhnT/fhzvncFjnz/fhzjkc1vnzfbhzDod1/nwf7k8cwWEOh3X+fB/unMNhnT/fhzvncFjnz/fhzg9wWOfP9+HOD3BY58/34c4PcFjnz/fhzg9wWOfP9+HOD3BY5w59uODQhwsOfbjg0IcLDn24cDy/zoNDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjj04YJDHy449OGCQx8uOPThgkMfLjr04aJDHy469OGiQx8uHs+v8+jQh4sOfbjo0IeLDn246NCHiw59uOjQh4sOfbjo0IeLDn246NCHiw59uOjQh4sOfbjo0IeLDn246NCHiw59uOjQh4sOfbjo0IeLDn246NCHiw59uOjQh4sOfbjo0IeLDn246NCHiw59uOjQh4sOfbjo0IeLDn246NCHiw59uOjQh4sOfbjo0IeLDn246NCHiw59uOjQh4sOfbjo0IeLDn246NCHiw59uOjQh4sOfbjo0IeLDn246NCHiw59uOjQh4sOfbjo0IeLDn246NCHiw59uOjQh4sOfbjo0IeLDn246NCHiw59uOjQh4sOfbjo0IeLDn246NCHiw59uOjQh4vWPtz7MuPSfV1mba29LzMusPdlxjXzvsy4DN6XGZ/s92XGh/V9mfH5e19mfKTel33vKbEWpF6XWTtP78u+95RYm0nvy773lFj7Q+/LvveUWFs+78u+95RYuzjvy771lIi1MfO+7FtPiVh7Le/LvvWUyPGtp0SshZL3Zd96SsRa+3hf9q2nRKzljNdl1r7F+7LvPSXWVsT7su89Jdbuwvuy7z0l1obB+7LvPSXWHsD7su89JdZv69+Xfe8psX6n/r7se0+J9Zvv92Xfe0qs30+/L/veU2L9Fvl92feeEut3ve/LvveUWL+RfV/2vafE+r3p+7LvPSXWbzffl33vKbF+B/m+7HtPifWbwvdl33tKrN/nvS/rPiXH65rjlwv++ktlPFLNr5F//vfXr5Xp6/O7j9PEz+8+dxM/v/uATvz87pM88fO7j/zEz++ujXmf3/8abuLnd1fbxM/vLsuJn//w+u1/7Tbx8x9ev/2v2yZ+/sPrt/8128TPf3j99r9em/j5D6/f/tdqEz//4fXb/zpt4uc/vH77X6NN/PyH12//67OJn//w+u1/bTbt81N/fzxve3tdKFrkt7Oko76GZo2fka30BMnR5C1IQpBfBXW+NDl/+vdn//nf+hku+tHfXb8b6e/6w0b6u/6zkf6uv22kv+ufGP2pfOmvsae/688b6e/6/z76+++HG+nvvn9upJ+9/97rZ++/2j76Nfb8s/9+vpF+tP9r+UV/PXr60f4/oB/t//f6+79fbKQf7f8D+tH+P6Af7f8D+tH+P6Af/fvXgH70718D+jfff/u10430b77/9ou4G+nffP/tV5M30r/5/tsva2+kf/P9t19f30j/5vtvv9C/kf7N998+4rCR/s333z70sZH+zfffPgazkf7N998+GLSR/s333z4qtZH+vfff3IfHNtK/9/6b+zjdRvr33n/zsff+m/uk40b6995/c5/93Ej/3vtv7tOw++jvY7kb6d98/+2Dyhvp33z/7aPbG+nffP/tw+wb6d98/+3j/Rvp33z/7R94sJH+zfff/hEQG+nffP/tH4qxkf7N99/+MSEb6d98/+0fnLKR/s333/5RMhvp33z/7R+us5H+zfff/nFDG+nffP/tH8C0kf7N99/+kVQb6d98/+0f0rWR/s333/6xZRvp33z/7Z/PtpH+zfff/vlyG+nffP/tn4+3kf7N99/++X4b6d98/2WfvzSgf/P9l33+0oD+zfdf9vlLA/o333/Z5y8N6N98/2WfvzSgf/P9l33+0oD+zfdf9vlLA/o333/757tupH/z/Xfz86/y5udf5c3Pv8qbn3+VNz//Km9+/lXe/PyrvPn5V3nz86/y5udf5c3Pv8qbn3+VNz//Km9+/lXe/PyrvPn5V3nz86/y5udf5c3Pv8qbn3+VNz//Km9+/lXe/PyrvPn5V3nz86/y5udf5c3Pv8qbn3+VNz//Km9+/lXe/PyrvPn5V2Xz86/K5udflc3Pvyqbn39Vjr3337L5+Vdl8/OvyubnX5XNz78q7POLWswf/S3Vnn60fw7oJ6/fFEJ860+/Dv9FP3n9jugnr98R/eT35wH96PNzRvSD359zTvr+6Jy/3D8dH/Vg9x9QT/b+FI/0eXZiCb8+O38d3uS9UTT95ZPj50clv2ZP/lHJb+STf1T05j/3R0W/J8z9UdGvFL/5UV/60UfqjOgHb8lD+sGb8pD+Xbflt/5d99q3/l030Ld+9K4oh3z0y5F6+tFb3YB+9P41oB/9K/G9fvSROiP60fvvgH70/jugH73/DuhH778D+tH774D+zfdf9JE6I/o333/RR+oM6EcfqTOif/P9F32kzoj+zfdf9JE6I/o333/RR+qM6N98/0UfqTOif/P9F32kzoj+zfdf9JE6I/o333/RR+qM6N98/0UfqTOif/P9l32kS9P60X90K0HsI10G9JP9f0Q/2f9H9JP9f0Q/2f9H9JP9///T36sUs490GdBP/v1rRD/5968B/ewjXQb0k/ffdKSvSvFRe+8/6CNdRvST/X9EP9n/R/ST/X9EP9n/R/ST/X9AP/pIkRTCl/8H6b2/oY8UGdGP9v8B/eTfv0b0k3//GtGP3n8H9KP33wH96P13QD96/x3Qj95/b/VX9JEiI/r33n8r+kiREf1777/12Hv/regjRUb0773/VvSRIiP6995/67H5/hs233/D5vsv+kiaEf3w/ffmSIsa4PvvrX74/nurH77/3uqH77+3+uH7761++P57p3/zI4Eq+UigIf3w/fdW/+b7L/usnwH9m++/7FN5BvRvvv+yz88Z0L/5/ss+/2dA/+b7L/v8nwH9m++/7PN/BvRvvv+yz/8Z0L/5/ss+/2dA/+b7L/v8nwH9m++/7PN/BvRvvn+xz88Z0P9z/6zhrV/y7/VLeR+SnI72GVpj918lfIZ+/avol+6f++YS3RPOa1mj++c++YzuWt5DNfR0/9wf1+j++e8lj+vOPd0/9/M1un/u42t0//z3jzW6f/57xyO6c/ic4y9HTzd0v7zVDd0vf9XdOronnK+yRjd0v8yfRkhOXd3Q/TIf+fe6ofvlrW7ofnmrG7pf5vwWkGvvPXbCeSlrdFP3yzvd1P3yTjd1v7zRPeE8FIPuzy+NEtKvut9iXE35Toyr096JcbXPOzGunngnxtXoPn+1S3LuiXF1rzsxrpZ0I2bCuRsTxbi+bN+JcXXgOzGuDnwnxtWB78S4OvCdGFcHvhNDcuAJ52tMFENy4AknX0wUQ3LgCWdSTBRDcuAJp0VMFENy4AnnOEwUQ3LgCScsTBQDcmCdcPbBRDEgB9YJpxJMFANyYD1ADqwT4P+JYkAOrBOw/IliQA6sE4D5eWIm0O8TxZAceAKXPlEMyYEnEOMTxZAceALLPVEMyYEnUNYTxZAceAL/PFEMyYEnkMkTxZAceAIzPFEMyYEn0LwTxZAceAJnO1EMyYEnELATxZAceAKbOlEMyYEnUKMTxZAceALPOVEMyYEnkJYTxZAceAIDOVEMyYEn0IkTxZAceAL3OFEMyYETyYETyYF9Wc07MSQH9qUq78SQHNiXf7wTQ3JgX1LxTgzJgX2ZwjsxJAf2pf/uxJAc2JfTuxNDcmBfou5ODMmBfdm3OzEkB/al1O7EkBzYlye7E0Ny4Al/iXyiGJID+zJxd2JIDuzLxN2JITmwLxN3J4bkwCQmTklMnJKYOCUxcUpi4pTExCmJiVMSE6ckJk5JTJySmDglMXFKYuKUxMQpiYlTEhOnJCZOSUyckpg4JTFxSmLilMTENRIT10hMXCMxcY3ExLUD5MCNxMQ1EhPXSExcIzFxjcTENRIT10hMXCMxcY3ExDUSE9dITFwjMXGNxMQ1EhPXSExcIzFxjcTENRIT10hMXCMxcY3ExDUSE9dITFwjMXGNxMQ1EhPXSExcIzFxjcTENRIT10hMXCMxcY3ExDUSE9dITFwjMXGNxMQ1EhPXSExcc2bi3n9JT1LnHPLmzMTdiPF14Bsxvg58I8bXgW/E+Drw78U4M3E3Ynwd+EaMrwPfiPF14BsxJAd2ZuJuxJAc2JmJuxFDcmBnJu73YpyZuBsxJAd2ZuJuxJAc2JmJuxFDcmBnJu5GDMmBnZm4GzEkB3Zm4m7EkBzYmYm7EUNyYGcm7kYMyYH75Nfxuub4rYwg8vnLhed///I3z0W7w+tRP8Prob8Of8vpOs0yOX36a52crtusk9P1m3Vyuo7zlJxUvuTU2JPT9Zx1crqus05O981vnZzuu986Oa6ufC/H1ZX1a7jG3kLvE2Hr5Hj6jpZf5NSjJ8fTdwbkePrOgBxP3xmQ4+k7A3I8fWdAjqfv3MnJR5+DWifH821wQI7n2+CAHJIrn3JIrnzKIbnyKYfkyqcckiufckiufMphuXKfjVonh+XKfT5qnRyWK/cZqXVyWK7c56TWyWG5cp+VWieH5cp9XmqdHJYr95mpdXJYrtznptbJYblyn51aJ4flyn1+ap0cliv3Gap1cliu3Oeo1slhuXKfpVonh+XKfZ5qnRyWK/eZqnVyWK7c56rWyWG5cp+tWieH5cp9vmqdHJYr9xmrdXJYrtznrNbJYblyn7VaJ4flyn3eap0cliv3mat1cliu3Oeu1slhuXKfvVonh+XKff5qnRyWK/cZrHVyWK7c57DWyWG5cp/FWieH5cp9HmudHJYr95msdXJYrtznstbJYblyn81aJ4flyv2/WbZODsuVXem1ATksV3al1wbksFzZlV4bkMNyZVd6bUAOy5Vd6bUBOSxXdqXXBuSwXNmVXhuQw3Ll/t80WyeH5cootu+Uw3JlFNt3ymG5MortO+WgXDmw2L7AYvsCi+0LLLYvHChXDiy2L7DYvsBi+wKL7Qssti+w2L7AYvsCi+0LLLYvsNi+wGL7AovtCyy2L7DYvsBi+wKL7Qssti+w2L7AYvsCi+0LLLYvsNi+wGL7AovtCyy2L7DYvsBi+wKL7Qssti+w2L7giou1mD/DW6o9OZ4L/V6OJxCVzl8y38PP/5aeHMdHeUSO46M8IsfxBWNEjuMLxogcvxeMnD9/qSzn/PXR6fiI8XOdATGOnpPikT43Kpab4U3eBtX0656m+FbuyU1NVu74yjJZueeWMFe55+4xV7nnRvMb5W85ns4+IMfxV8cROY5vlCNyIO7+kuMJVY3IgfjwW46nucohHzlypJ4cT8cckONpgwNyPN+3B+R4uvKAHE9XHpDj6coDcjxd+V6OJ1Q1IsfTlQfksFzZE6oakcNyZU+oakQOy5U9oaoROSxX9oSqBuR4QlUjcliu7AlVjchhubInVDUih+XKnlDViByWK3tCVSNyWK7sCVWNyGG5sidUNSKH5cqu2FDTz5+xTEf3OzFXbGhAjut38fdyXL+Lv5MTXbGhATmepZsBOZ6lm/9XTqc4EV2xoQE5jm+DI3I8q5ADcta5cleO59vgkb6KE0ft7FnRExsakOMJxozI8XzfGZDj+b4zIMfzt9ABOZ6/hQ7I8W1IffnOeUFPjqfvDMjx9J0BOZ6/hd7L8QRjRuR4uvKAHN/e6q0c397qrRxPVx6Q49tbvZXDcmVPMGZEDsuVPcGYATmeYMyIHJYre4IxI3JYruwJxozIYbmy5x+9GpHDcmVPimlEDsuVPf/o1YgcX1e+AWMii/GKLMYrshivyGK8Iovxip5/9GpEjq8r38rxdeU7Oa7w1oAcliu7YlYDcliu7ApEDchhubIrnzUgh+XKrnzWgByWK7vyWQNyWK7symcNyGG5siufNSCH5cqufNaAHJYru/JZA3JYruzKZw3IYdmgKxA1IKe70GN4H8Nxvi5+ripfV3XX4+1V3WVze1X36b67qo+j3F7V3cFvr+r+a6TjfavyL82pUj5Xdf81bq/q/muE9n6A4i9X5fq+qt8svpur/1cVbq/q7mS3V3Wfw9urvvMvL/2+Yyi1vBdLDeVzXf26rvvvMXBd91+kHu/LatK/PlXSL/rdXtX9F7m9qvss3l7VfRbvrup34u7/FfvltYHrunf7VmX3Xt9e9a073a9W3V5lvNP/8R//F4AR+9w="
    ],
    "fileMap": {
      "1": {
        "source": "mod swap;\nmod interfaces;\n\ncontract bridge {\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        state_vars::{\n            map::Map,\n            public_state::PublicState\n        },\n        types::type_serialization::field_serialization::{\n            FieldSerializationMethods, FIELD_SERIALIZED_LEN,\n        },\n        types::type_serialization::aztec_address_serialization::{\n            AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN\n        },\n        types::address::{AztecAddress},\n        selector::compute_selector,\n    };\n    use crate::swap::{SWAP_SERIALIZED_LEN, Swap, SwapSerializationMethods};\n    use crate::interfaces::Token;\n\n    struct Storage {\n        owner: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        operator: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n\n        token1: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        token2: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n\n        swaps: Map<PublicState<Swap, SWAP_SERIALIZED_LEN>>,\n        counter: PublicState<Field, FIELD_SERIALIZED_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                owner: PublicState::new(\n                    context,\n                    1,\n                    AztecAddressSerializationMethods,\n                ),\n                operator: PublicState::new(\n                    context,\n                    2,\n                    AztecAddressSerializationMethods,\n                ),\n                token1: PublicState::new(\n                    context,\n                    3,\n                    AztecAddressSerializationMethods,\n                ),\n                token2: PublicState::new(\n                    context,\n                    4,\n                    AztecAddressSerializationMethods,\n                ),\n                swaps: Map::new(\n                   context,\n                   5,\n                   |context, slot| {\n                       PublicState::new(\n                           context,\n                           slot,\n                           SwapSerializationMethods,\n                       )\n                   },\n               ),\n               counter: PublicState::new(\n                   context,\n                   6,\n                   FieldSerializationMethods,\n               ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(owner: AztecAddress, operator: AztecAddress) {\n        let selector = compute_selector(\"_initialize(Field)\");\n        context.call_public_function(context.this_address(), selector, [owner.address]);\n    }\n\n    #[aztec(public)]\n    internal fn _initialize(\n        owner: Field,\n    ) {\n        storage.owner.write(AztecAddress::new(owner));\n    }\n\n    #[aztec(public)]\n    fn add_token(\n        token_id: Field,\n        token: AztecAddress,\n        amount: Field,\n        nonce_for_transfer: Field\n    ) {\n         Token::at(token.address).transfer_public(\n           context,\n           context.msg_sender(),\n           context.this_address(),\n           amount,\n           nonce_for_transfer,\n        );\n        if (token_id == 1) {\n            storage.token1.write(token);\n        } else if (token_id == 2) {\n            storage.token2.write(token);\n        }\n    }\n\n    #[aztec(public)]\n    fn swap_public(\n        token_id: Field,\n        amount: Field,\n        nonce_for_transfer: Field\n    ) {\n        let mut token = AztecAddress::new(0);\n        if (token_id == 1) {\n            token = storage.token1.read();\n        } else {\n            token = storage.token2.read();\n        }\n\n        Token::at(token.address).transfer_public(\n            context,\n            context.msg_sender(),\n            context.this_address(),\n            amount,\n            nonce_for_transfer,\n        );\n\n        let counter = storage.counter.read();\n        let swap = storage.swaps.at(counter);\n        swap.write(Swap {token_id: token_id, amount: amount, address: context.msg_sender()});\n\n        storage.counter.write(counter + 1);\n    }\n\n    unconstrained fn get_swap(swap_id: Field) -> Swap {\n       storage.swaps.at(swap_id).read()\n    }\n\n    unconstrained fn get_storage() -> [AztecAddress; 4] {\n       [storage.owner.read(), storage.operator.read(), storage.token1.read(), storage.token2.read()]\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: Field,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; 0]) -> [Field; 4] {\n        [0, 0, 0, 0]\n    }\n}",
        "path": "/Users/vovkapultik/Projects/ZKBank/MVPv1/l2-contracts/contracts/bridge/src/main.nr"
      },
      "35": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "40": {
        "source": "// GENERATED FILE - DO NOT EDIT, RUN yarn remake-constants in circuits.js\nglobal ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 4;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal HISTORIC_BLOCKS_TREE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal HISTORIC_BLOCK_DATA_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\nglobal STORAGE_SLOT_GENERATOR_INDEX__BASE_SLOT = 0;\nglobal STORAGE_SLOT_GENERATOR_INDEX__MAPPING_SLOT = 1;\nglobal STORAGE_SLOT_GENERATOR_INDEX__MAPPING_SLOT_PLACEHOLDER = 2;\nglobal PRIVATE_STATE_NOTE_GENERATOR_INDEX__VALUE = 1;\nglobal PRIVATE_STATE_NOTE_GENERATOR_INDEX__OWNER = 2;\nglobal PRIVATE_STATE_NOTE_GENERATOR_INDEX__CREATOR = 3;\nglobal PRIVATE_STATE_NOTE_GENERATOR_INDEX__SALT = 4;\nglobal PRIVATE_STATE_NOTE_GENERATOR_INDEX__NONCE = 5;\nglobal PRIVATE_STATE_NOTE_GENERATOR_INDEX__MEMO = 6;\nglobal PRIVATE_STATE_NOTE_GENERATOR_INDEX__IS_DUMMY = 7;\nglobal PRIVATE_STATE_TYPE__PARTITIONED = 1;\nglobal PRIVATE_STATE_TYPE__WHOLE = 2;\n",
        "path": "/aztec/constants_gen.nr"
      },
      "41": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/aztec/context.nr"
      },
      "42": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/aztec/hash.nr"
      },
      "57": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "65": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "66": {
        "source": "use crate::constants_gen::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}\n",
        "path": "/aztec/oracle/public_call.nr"
      },
      "68": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/aztec/oracle/storage.nr"
      },
      "71": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "72": {
        "source": "use crate::utils::field_from_bytes;\n\nglobal SELECTOR_SIZE = 4;\n\npub fn compute_selector<N>(signature: str<N>) -> Field {\n    let bytes = signature.as_bytes();\n    let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n    \n    let mut selector_be_bytes = [0; SELECTOR_SIZE];\n    for i in 0..SELECTOR_SIZE {\n        selector_be_bytes[i] = hash[i];\n    }\n\n    field_from_bytes(selector_be_bytes, true)\n}",
        "path": "/aztec/selector.nr"
      },
      "75": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/aztec/state_vars/map.nr"
      },
      "76": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "85": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
        "path": "/aztec/types/type_serialization/field_serialization.nr"
      },
      "87": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};",
        "path": "/aztec/types/type_serialization/aztec_address_serialization.nr"
      },
      "88": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/aztec/utils.nr"
      },
      "95": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nstruct Swap {\n    token_id: Field,\n    amount: Field,\n    address: Field,\n}\n\nglobal SWAP_SERIALIZED_LEN: Field = 3;\n\nfn deserializeSwap(fields: [Field; SWAP_SERIALIZED_LEN]) -> Swap {\n    Swap {\n        token_id: fields[0] as Field,\n        amount: fields[1] as Field,\n        address: fields[2] as Field,\n    }\n}\n\nfn serializeSwap(swap: Swap) -> [Field; SWAP_SERIALIZED_LEN] {\n    [swap.token_id as Field, swap.amount as Field, swap.address as Field]\n}\n\nimpl Swap {\n    fn serialize(self: Self) -> [Field; SWAP_SERIALIZED_LEN] {\n        serializeSwap(self)\n    }\n}\n\nglobal SwapSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeSwap,\n    serialize: serializeSwap,\n};",
        "path": "/Users/vovkapultik/Projects/ZKBank/MVPv1/l2-contracts/contracts/bridge/src/swap.nr"
      },
      "96": {
        "source": "use dep::aztec::{\n  context::{PublicContext, PrivateContext},\n  selector::compute_selector,\n  types::address::{AztecAddress},\n};\n\nstruct Token {\n  address: Field,\n}\n\nimpl Token {\n    pub fn at(address: Field) -> Self {\n        Self { address }\n    }\n\n    pub fn transfer_public(self: Self, context: PublicContext, from: Field, to: Field, amount: Field, nonce: Field) {\n        let _transfer_return_values = context.call_public_function(\n          self.address,\n          compute_selector(\"transfer_public((Field),(Field),Field,Field)\"),\n          [from, to, amount, nonce]\n        );\n    }\n}",
        "path": "/Users/vovkapultik/Projects/ZKBank/MVPv1/l2-contracts/contracts/bridge/src/interfaces.nr"
      }
    }
  }
}